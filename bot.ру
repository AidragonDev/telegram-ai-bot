import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

if not OPENAI_API_KEY:
    logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —ç—Ö–æ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å
client = None
if OPENAI_API_KEY:
    client = OpenAI(api_key=OPENAI_API_KEY)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫!**\n\n"
        "–Ø —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∏–¥–µ—è–º–∏\n‚Ä¢ –ò –ø—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ–º!\n\n"
        "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!** üí´"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n\n"
        "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç** - –∏ —è –¥–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ! üéØ"
    )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    status = "‚úÖ AI —Ä–µ–∂–∏–º" if client else "‚ö†Ô∏è –≠—Ö–æ-—Ä–µ–∂–∏–º (–æ–∂–∏–¥–∞–Ω–∏–µ AI –∫–ª—é—á–∞)"
    await update.message.reply_text(
        f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n"
        f"‚Ä¢ **–ò–º—è:** Aidragon AI Assistant\n"
        f"‚Ä¢ **–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π\n"
        f"‚Ä¢ **–°—Ç–∞—Ç—É—Å:** {status}\n"
        f"‚Ä¢ **–•–æ—Å—Ç–∏–Ω–≥:** Render.com\n\n"
        f"–ü–∏—à–∏ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üòä"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_message = update.message.text
        user_name = update.message.from_user.first_name
        
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {user_message}")
        
        if client:
            # –†–µ–∂–∏–º —Å AI
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç–º–æ–¥–∑–∏. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–º."
                    },
                    {
                        "role": "user", 
                        "content": user_message
                    }
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç AI: {ai_response[:100]}...")
            await update.message.reply_text(ai_response)
            
        else:
            # –≠—Ö–æ-—Ä–µ–∂–∏–º (–µ—Å–ª–∏ –Ω–µ—Ç AI –∫–ª—é—á–∞)
            await update.message.reply_text(
                f"üîπ **–≠—Ö–æ-—Ä–µ–∂–∏–º:** {user_message}\n\n"
                f"‚ÑπÔ∏è –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è AI —Ñ—É–Ω–∫—Ü–∏–π –¥–æ–±–∞–≤—å OPENAI_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render."
            )
        
    except Exception as e:
        error_msg = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∂–µ."
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(error_msg)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("info", info_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üü¢ Russian AI Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("=" * 50)
        print("ü§ñ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
        print(f"üìç –¢–æ–∫–µ–Ω: {'‚úÖ –ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print(f"üìç OpenAI: {'‚úÖ –ù–∞–π–¥–µ–Ω' if OPENAI_API_KEY else '‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        print("‚ö° –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ polling (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")

if __name__ == "__main__":
    main()